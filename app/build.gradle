apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

android {
    compileSdkVersion rootProject.ext.sdk_version
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion rootProject.ext.sdk_version
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
        lintOptions {
            abortOnError false
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'

    compile "com.github.Qixingchen:Android-Base-Utils:V1.0.0"

    //RxJava
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.1.6'
    compile 'com.tbruyelle.rxpermissions:rxpermissions:0.8.0@aar'
    //RxBinding
    compile "com.jakewharton.rxbinding:rxbinding:$rx_binding_version"
    compile "com.jakewharton.rxbinding:rxbinding-support-v4:$rx_binding_version"
    compile "com.jakewharton.rxbinding:rxbinding-appcompat-v7:$rx_binding_version"
    compile "com.jakewharton.rxbinding:rxbinding-design:$rx_binding_version"
    compile "com.jakewharton.rxbinding:rxbinding-recyclerview-v7:$rx_binding_version"
}
// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

[javadoc]*.options*.encoding = 'UTF-8'
[javadoc]*.options*.charSet = 'UTF-8'

artifacts {
    archives sourcesJar
    archives javadocJar
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/debug/jacoco.xml"
}

tasks.coveralls {
    dependsOn 'assembleDebugUnitTest'
    onlyIf { System.env.'CI' }
}
